// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  telegramId          String        @unique
  name                String?       @unique
  groups              Group[]
  // only admin users can have password, so if the password exists it's an admin
  password            String?
  ApiKeys             ApiKey[]
  // waiting for https://github.com/prisma/prisma/issues/2219
  // For the time being, it's done in userland as AuthorizationEnum
  // Authorization status doesn't impact admin page log-ins,
  // only telegram bot functionality
  authorizationStatus Int           @default(0)
  // UserRoleEnum
  role                Int           @default(0)
  channels            UserChannel[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model ApiKey {
  // Public part, displayed in user interface
  prefix    String   @id
  // Actual key part, stored as hash
  hash      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  Users     User[]
  Channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Channel {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  Groups       Group[]
  userChannels UserChannel[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model UserChannel {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  @@id([userId, channelId])
  @@unique([userId, channelId])
}
